 Here's a **cheat sheet** of common **array operations in Python** using lists (Python‚Äôs built-in dynamic array):

---

## ‚úÖ **Basic Operations on Arrays (Lists) in Python**

| Operation           | Syntax / Code     | Notes                    |
| ------------------- | ----------------- | ------------------------ |
| **Create array**    | `arr = [1, 2, 3]` | Initialize list          |
| **Access element**  | `arr[0]`          | Index starts at 0        |
| **Update element**  | `arr[1] = 10`     | Assign new value         |
| **Length of array** | `len(arr)`        | Total number of elements |

---

## üîÅ **Traversal**

| Operation                     | Syntax / Code                   |
| ----------------------------- | ------------------------------- |
| **Loop through array**        | `for x in arr:`                 |
| **Loop with index**           | `for i in range(len(arr)):`     |
| **Enumerate (index + value)** | `for i, val in enumerate(arr):` |

---

## ‚ûï **Insertions**

| Action                       | Code                 | Time |
| ---------------------------- | -------------------- | ---- |
| **Append at end**            | `arr.append(5)`      | O(1) |
| **Insert at index**          | `arr.insert(2, 99)`  | O(n) |
| **Extend with another list** | `arr.extend([7, 8])` | O(k) |

---

## ‚ûñ **Deletions**

| Action               | Code            | Time |
| -------------------- | --------------- | ---- |
| **Remove by value**  | `arr.remove(3)` | O(n) |
| **Delete by index**  | `del arr[2]`    | O(n) |
| **Pop last element** | `arr.pop()`     | O(1) |
| **Pop at index**     | `arr.pop(1)`    | O(n) |
| **Clear array**      | `arr.clear()`   | O(n) |

---

## üîç **Searching & Checking**

| Action                    | Code           |
| ------------------------- | -------------- |
| **Check if value exists** | `if 5 in arr:` |
| **Find index of value**   | `arr.index(5)` |
| **Count occurrences**     | `arr.count(5)` |

---

## üìê **Sorting & Reversing**

| Action                | Code                       |
| --------------------- | -------------------------- |
| **Sort ascending**    | `arr.sort()`               |
| **Sort descending**   | `arr.sort(reverse=True)`   |
| **Get a sorted copy** | `sorted_arr = sorted(arr)` |
| **Reverse array**     | `arr.reverse()`            |

---

## üìå Bonus

| Action                      | Code                                   |
| --------------------------- | -------------------------------------- |
| **Copy array**              | `arr2 = arr.copy()`                    |
| **Slice array**             | `arr[1:4]` ‚Üí elements at index 1, 2, 3 |
| **Join into string**        | `' '.join(map(str, arr))`              |
| **Convert string to array** | `list('hello')`                        |

---

------------------------------------------------------------------------------------------------------------------------
-----------------------------                                 ----------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

Let‚Äôs understand **which sorting techniques** are commonly used or best suited for **different data structures** üß†üëá

---

## ‚úÖ 1. **Arrays / Lists**

Most common and versatile for sorting.

| Sorting Algorithm       | Best For                    | Notes                        |
| ----------------------- | --------------------------- | ---------------------------- |
| **Bubble Sort**         | Learning/basic concept      | Slow (O(n¬≤))                 |
| **Selection Sort**      | Small data sets             | Always O(n¬≤)                 |
| **Insertion Sort**      | Small/nearly sorted arrays  | Efficient for small `n`      |
| **Merge Sort**          | Stable sort, large data     | O(n log n), extra space used |
| **Quick Sort**          | Fast, general purpose       | O(n log n) avg, O(n¬≤) worst  |
| **Heap Sort**           | Memory efficient            | O(n log n), in-place         |
| **TimSort (Python)**    | Real-world hybrid sort      | Used in Python‚Äôs `sort()`    |
| **Radix/Counting Sort** | Integers/Fixed-range values | Non-comparison based         |

---

## ‚úÖ 2. **Linked Lists**

Linked lists are **inefficient for random access**, so some array-based sorts won‚Äôt work well.

| Sorting Algorithm   | Why It Fits                       |
| ------------------- | --------------------------------- |
| **Merge Sort**      | Ideal (uses pointers, stable)     |
| **Insertion Sort**  | Works well for small linked lists |
| ‚ùå Bubble/Quick/Heap | Not efficient due to node access  |

---

## ‚úÖ 3. **Stacks & Queues**

These are **LIFO/FIFO** ‚Äî not meant for internal sorting, but if needed:

| Approach                        | Notes                             |
| ------------------------------- | --------------------------------- |
| **Use auxiliary stack/queue**   | Pop all ‚Üí sort ‚Üí push back        |
| **Sort Stack (Recursively)**    | Sort without extra space (tricky) |
| **Use a priority queue (heap)** | For sorted insertion/removal      |

---

## ‚úÖ 4. **Heaps (Binary Heap / Priority Queue)**

| Use Case                    | Notes                      |
| --------------------------- | -------------------------- |
| **Heap Sort**               | Extract min/max repeatedly |
| **Always partially sorted** | Max at top (for max-heap)  |

---

## ‚úÖ 5. **Trees (Binary Search Tree, AVL, etc.)**

| Method                          | Notes                            |
| ------------------------------- | -------------------------------- |
| **Inorder Traversal**           | Gives sorted order from BST      |
| **Rebalancing (AVL/Red-Black)** | Keeps tree "sorted" structurally |

---

## üîÅ Summary Table:

| Data Structure  | Recommended Sorting Techniques             |
| --------------- | ------------------------------------------ |
| **Array/List**  | Merge Sort, Quick Sort, Heap Sort, TimSort |
| **Linked List** | Merge Sort, Insertion Sort                 |
| **Stack/Queue** | Auxiliary structure, recursive sort        |
| **Heap**        | Heap Sort (built-in structure)             |
| **BST**         | Inorder Traversal                          |

---

------------------------------------------------------------------------------------------------------------------------
-----------------------------                                 ----------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

the **different searching techniques** used in various **data structures** ‚Äî  üîç‚ö°

---

## ‚úÖ 1. **Arrays / Lists**

| Technique              | When to Use                     | Time Complexity     |
| ---------------------- | ------------------------------- | ------------------- |
| **Linear Search**      | Unsorted arrays                 | O(n)                |
| **Binary Search**      | Sorted arrays                   | O(log n)            |
| **Ternary Search**     | Sorted arrays (special case)    | O(log‚ÇÉ n)           |
| **Jump/Search Blocks** | Large sorted lists              | O(‚àön)               |
| **Exponential Search** | Infinite or unknown size arrays | O(log i), i = index |

---

## ‚úÖ 2. **Linked Lists**

| Technique         | Notes                           | Time Complexity |
| ----------------- | ------------------------------- | --------------- |
| **Linear Search** | Only option (no index access)   | O(n)            |
| ‚ùå Binary Search   | Not suitable (no random access) | ‚Äî               |

---

## ‚úÖ 3. **Stacks & Queues**

| Technique               | Notes                         | Time Complexity |
| ----------------------- | ----------------------------- | --------------- |
| **Linear Search**       | Must pop/dequeue each element | O(n)            |
| **Use auxiliary space** | Copy to array ‚Üí apply search  | O(n)            |

---

## ‚úÖ 4. **Heaps / Priority Queues**

| Technique                  | Notes                  | Time Complexity |
| -------------------------- | ---------------------- | --------------- |
| **Search top (peek)**      | Access max/min in O(1) | O(1)            |
| **Search arbitrary value** | Not efficient          | O(n)            |

---

## ‚úÖ 5. **Binary Search Trees (BST)**

| Technique                         | Notes                              | Time Complexity          |
| --------------------------------- | ---------------------------------- | ------------------------ |
| **BST Search**                    | Traverse left/right based on value | O(log n) avg, O(n) worst |
| **Inorder Traversal**             | To access sorted values            | O(n)                     |
| **Search in AVL/Red-Black Trees** | Balanced ‚Üí O(log n)                | O(log n)                 |

---

## ‚úÖ 6. **Hash Tables (HashMap / HashSet)**

| Technique             | Notes                 | Time Complexity      |
| --------------------- | --------------------- | -------------------- |
| **Direct key access** | Uses hash function    | O(1) avg, O(n) worst |
| **No sorting needed** | Efficient for lookups | ‚Äî                    |

---

## ‚úÖ 7. **Graphs**

| Technique                      | Use Case                      | Time Complexity  |
| ------------------------------ | ----------------------------- | ---------------- |
| **Breadth-First Search (BFS)** | Shortest path (unweighted)    | O(V + E)         |
| **Depth-First Search (DFS)**   | Explore paths deeply          | O(V + E)         |
| **Dijkstra‚Äôs Algorithm**       | Shortest path (weighted)      | O((V + E) log V) |
| **A\* Search**                 | Shortest path with heuristics | Varies           |

---

## üß† Summary Table:

| Data Structure  | Common Searches                      |
| --------------- | ------------------------------------ |
| **Array**       | Linear, Binary, Ternary, Jump, Exp   |
| **Linked List** | Linear only                          |
| **Stack/Queue** | Linear (pop/scan)                    |
| **Heap**        | Top element (O(1)), full scan (O(n)) |
| **BST**         | Logarithmic search                   |
| **Hash Table**  | O(1) lookup                          |
| **Graph**       | BFS, DFS, Dijkstra, A\*, etc.        |

---

------------------------------------------------------------------------------------------------------------------------
-----------------------------                                 ----------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

explore these **other key operations and concepts**:

---

## ‚úÖ Core Categories Beyond Sorting & Searching

### 1. **Insertion**

* Add data to a structure
* Examples:

  * `arr.append(5)` in Array
  * `insertAtEnd()` in Linked List
  * `enqueue()` in Queue
  * `push()` in Stack
  * `insert()` in BST or HashMap

---

### 2. **Deletion**

* Remove data from a structure
* Examples:

  * `arr.pop()`, `del arr[i]`
  * `pop()` from Stack
  * `dequeue()` from Queue
  * `remove(key)` in HashMap or BST

---

### 3. **Traversal / Iteration**

* Visit each element
* Examples:

  * Looping through arrays or linked lists
  * Inorder, Preorder, Postorder for trees
  * BFS/DFS in graphs

---

### 4. **Updating / Modifying**

* Change existing values
* Examples:

  * `arr[i] = new_val`
  * `update(node.val)` in Linked List or Tree

---

### 5. **Merging**

* Combine two data structures
* Examples:

  * Merge sorted arrays
  * Merge BSTs
  * Union operation in Union-Find

---

### 6. **Splitting / Partitioning**

* Break data into groups
* Examples:

  * QuickSort partition
  * Divide Linked List in two halves
  * Graph components

---

### 7. **Balancing**

* Keep structure optimized
* Examples:

  * AVL Tree rotations
  * Rehashing in Hash Table
  * Heapify in Heaps

---

### 8. **Backtracking / Path Building**

* Used in problems like:

  * N-Queens
  * Sudoku
  * Maze Solvers

---

### 9. **Dynamic Programming (DP) State Updates**

* Often built on top of arrays/tables
* Use recurrence + memoization

---

### üîç Bonus: **Data Structure-Specific Tasks**

| Data Structure       | Unique Tasks                          |
| -------------------- | ------------------------------------- |
| **Stack**            | Reverse data, evaluate expressions    |
| **Queue**            | Level order traversal, sliding window |
| **Heap**             | Find k-largest/smallest elements      |
| **Graph**            | Cycle detection, shortest path        |
| **Trie**             | Word search, autocomplete             |
| **Segment Tree**     | Range queries & updates               |
| **Union-Find (DSU)** | Grouping & connectivity               |

---

------------------------------------------------------------------------------------------------------------------------
-----------------------------                                 ----------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------

