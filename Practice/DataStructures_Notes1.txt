
### ðŸ§© **Types of Data Structures**

#### ðŸ”¹ **1. Linear Data Structures**

Elements are arranged sequentially. Each element is connected to its previous and next element.

* **Array** â€“ Fixed-size collection of elements of the same type.
* **Linked List** â€“ Each element (node) contains data + reference to next (and sometimes previous).
* **Stack** â€“ LIFO (Last In First Out): Think undo functionality.
* **Queue** â€“ FIFO (First In First Out): Think task scheduling.
* **Deque** â€“ Double-ended queue: insert/delete from both ends.

---

#### ðŸ”¹ **2. Non-Linear Data Structures**

Elements are not arranged sequentially. They form a hierarchy or network.

* **Tree** â€“ Hierarchical structure (Binary Tree, BST, AVL, Heap, etc.)
* **Graph** â€“ Nodes (vertices) connected via edges; can be directed/undirected, weighted/unweighted.
* **Trie** â€“ Prefix tree, often used in search engines or autocomplete.

---

#### ðŸ”¹ **3. Hash-based Structures**

Efficient for key-value mappings.

* **Hash Table / Hash Map** â€“ Key-value pairs with fast lookup using hashing.
* **Hash Set** â€“ Stores only keys, no duplicates.

---

#### ðŸ”¹ **4. Specialized / Advanced Structures**

Used for optimization or specific scenarios.

* **Heap** â€“ Specialized tree for priority-based processing (min-heap, max-heap).
* **Segment Tree / Fenwick Tree** â€“ For range queries and updates.
* **Disjoint Set (Union-Find)** â€“ Useful in graph algorithms (like Kruskalâ€™s).
* **Bloom Filter** â€“ Probabilistic structure for set membership testing.
* **Skip List** â€“ Layered linked lists for fast search.

---

### ðŸ“¦ Classification Summary

| Category   | Examples                             | Use-case                            |
| ---------- | ------------------------------------ | ----------------------------------- |
| Linear     | Array, Stack, Queue, Linked List     | Ordered data, basic processing      |
| Non-Linear | Trees, Graphs, Trie                  | Hierarchical/Network-based data     |
| Hash-Based | HashMap, HashSet                     | Fast lookup, key-value storage      |
| Advanced   | Heap, Union-Find, Segment Tree, Trie | Specific performance-critical tasks |

---